<?php

/**
 * @file
 * Contains \Drupal\create_koalas\Form\CreateKoalasForm.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\views\ViewExecutable;
use \Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\RequestStack;
use Drupal\Core\Datetime\DrupalDateTime;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Component\Utility\StringHelper;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\Query\QueryFactory;
use Drupal\Core\Entity\EntityTypeManager;
use Drupal\Core\Entity\EntityTypeManagerInterface;







/**
 * Implements hook_form_FORM_ID_alter() for the node_agendar_clase_form.
 */
function create_koalas_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //dump($form_id);
  // Obtener el usuario actual.
  $user = \Drupal::currentUser();
  $uid = $user->id();
  // Obtener el displayname del usuario actual drupal 9.
  $username = $user->getDisplayName();

  // Obtener el field_nombre_del_acudiente del usuario actual.
  $query = \Drupal::entityQuery('user');
  $query->condition('uid', $uid);
  $entity_ids = $query->execute();
  $user = User::load(array_shift($entity_ids));
  $field_nombre_del_acudiente = $user->get('field_nombre_del_acudiente')->value;
  $field_nombres_y_apellidos_del_pr = $user->get('field_nombres_y_apellidos_del_pr')->value;

  // Que no se puedan editar el campo field_nombres_y_apellidos_del_pr del formulario user_editar_profesor_form pero que muestre su valor.
  if ($form_id == 'user_editar_profesor_form') {
    $form['field_nombres_y_apellidos_del_pr']['widget'][0]['value']['#default_value'] = $field_nombres_y_apellidos_del_pr;
    //$form['field_nombres_y_apellidos_del_pr']['#access'] = FALSE;
    $form['field_nombres_y_apellidos_del_pr']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['field_nombres_y_apellidos_del_pr']['widget'][0]['value']['#attributes']['disabled'] = 'disabled';

    // Deshabilitar el campo de correo electrónico.
      $form['account']['mail']['#attributes']['readonly'] = 'readonly';
      $form['account']['mail']['#attributes']['disabled'] = 'disabled';

    $form['actions']['submit']['#value'] = new TranslatableMarkup('Actualizar perfil');
  }




  // Comprobar que estamos agregando un nuevo nodo o editando uno existente.
  $routeMatch = \Drupal::routeMatch();
  $routeName = $routeMatch->getRouteName();  

  if ($routeName == 'node.add.agendando_clase') {

    // Obtener el objeto RequestStack.
    $request_stack = \Drupal::service('request_stack');
    // Obtener el objeto Request de la solicitud actual.
    $request = $request_stack->getCurrentRequest();
    // Obtener el valor del parámetro 'id'.
    $id = $request->query->get('id');
    // Cargar la entidad correspondiente al ID de usuario.
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $user = $entity_type_manager->getStorage('user')->load($id);
    // get field_nombre_del_hijo from user
    $field_nombre_del_hijo = $user->get('field_nombre_del_hijo')->value;    

    // Asignar el valor del parámetro 'id' al campo field_alumno_relacionado del formulario.
    $form['field_alumno_relacionado']['widget'][0]['target_id']['#default_value'] = $user;

    // Asignar el valor del parámetro 'field_nombre_del_hijo' al campo field_nombre_del_nino_a del formulario.
    $form['field_nombre_del_nino_a']['widget'][0]['value']['#default_value'] = $field_nombre_del_hijo;
    // Agregar solo lectura al campo field_nombre_del_nino_a
    $form['field_nombre_del_nino_a']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';


    // Obtener el valor del parámetro 'idcontenido'.
    $idcontenido = $request->query->get('idcontenido');
    // Cargar la entidad correspondiente al ID de contenido.
    $node = $entity_type_manager->getStorage('node')->load($idcontenido);
    // get field_fecha_nacimiento from node
    $field_fecha_nacimiento = $node->get('field_fecha_nacimiento')->value;
    // Asignar el valor del parámetro 'field_fecha_nacimiento' al campo field_fecha_nac del formulario.
    $form['field_fecha_nac']['widget'][0]['value']['#default_value'] = $field_fecha_nacimiento;
    // Agregar solo lectura al campo field_fecha_nac
    $form['field_fecha_nac']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';

    // Obtener el valor del parámetro 'field_profesor'.
    $field_profesor = $request->query->get('field_profesor');
    // Asignar el valor del parámetro 'field_profesor' al campo field_asignar_profesor del formulario.
    $form['field_asignar_profesor']['widget']['#default_value'] = $field_profesor;
    // Agregar solo lectura al campo field_asignar_profesor
    $form['field_asignar_profesor']['widget']['#attributes']['readonly'] = 'readonly';

    // Cambiar el titulo a mostrar del campo field_fecha_cita_oculta
    $form['field_fecha_cita_oculta']['widget'][0]['value']['#title'] = 'Fecha de la clase';
    //$form['field_fecha_cita_oculta']['widget'][0]['value']['#attributes']['type']="text";
    //$form['field_fecha_cita_oculta']['widget'][0]['value']['date']['#default_value'] = "31/05/1980";
    //$form['field_fecha_cita_oculta']['widget'][0]['value']['#date_date_format'] = "d/m/Y";
    #date_date_format

        $fecha_texto = "31/05/1980";
    $fecha_obj = DrupalDateTime::createFromFormat('d/m/Y', $fecha_texto);

    // Asignar el valor al campo field_fecha_cita_oculta (fecha y hora).
    $form['field_fecha_cita_oculta'][0]['value']['date']['#default_value'] = $fecha_obj;
    $form['field_fecha_cita_oculta'][0]['value']['time']['#default_value'] = $fecha_obj->format('H:i');
    //$form['field_fecha_cita_oculta']['#prefix'] = '<div>Texto o contenido del div que deseas agregar</div>';
    //dump($form['field_fecha_cita_oculta']);


    // Agregar atributos min y max al campo field_fecha_cita_oculta
    // $form['field_fecha_cita_oculta']['widget'][0]['value']['#attributes']['min'] = date('Y-m-d', strtotime('+1 day'));
    // $form['field_fecha_cita_oculta']['widget'][0]['value']['#attributes']['max'] = date('Y-m-d', strtotime('+1 month'));


    $title_value = \Drupal::translation()->translate('Agendar clase al Koala ') . $field_nombre_del_hijo;
    $form['title']['widget'][0]['value']['#default_value'] = $title_value;
    // Agregar solo lectura al campo title
    $form['title']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';

    
    $form['actions']['submit']['#value'] = new TranslatableMarkup('Confirmar clase');

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'callback_submit_agendar_clase';
      }
    }
  }


  $editando = TRUE;
  if ($routeName == 'node.add.agendar_clases') {
    $editando = FALSE;
  }

  if ($form_id == 'node_agendar_clase_form' || $form_id == 'node_agendar_clase_agendar_clases_form') {
    $title_value = \Drupal::translation()->translate('Agendar clase gratuita de 25 minutos al usuario ') . $field_nombre_del_acudiente;
    $form['title']['widget'][0]['value']['#default_value'] = $title_value;
    $form['title']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = new TranslatableMarkup('Agendar clase');
    if ($editando) {
      $form['actions']['submit']['#value'] = new TranslatableMarkup('Actualizar clase');
      /*
       * Ocultar los siguientes campos:
       * field_fecha_nac
       * field_he_leido_y_estoy_de_acuerd
       * field_nombre_del_nino_a
       * field_sexo_n
       */
      $form['field_fecha_nac']['#access'] = FALSE;
      $form['field_he_leido_y_estoy_de_acuerd']['#access'] = FALSE;
      $form['field_nombre_del_nino_a']['#access'] = FALSE;
      $form['field_sexo_n']['#access'] = FALSE;
    }
    else {
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'callback_submit';
        }
      }
    }
  }

  // node_crear_hijos_form  and node_crear_hijos_crear_koalas_form.
  if ($form_id == 'node_crear_hijos_form' || $form_id == 'node_crear_hijos_crear_koalas_form') {
    $form['actions']['submit']['#value'] = new TranslatableMarkup('Crear hijo');
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'callback_submit_crear_hijo';
      }
    }
  }


  // node_koala_ninos_form $routeName == 'view.koalas_avatares_ninos.page_1'. Koalas avatares ninos.
  // dump($routeName);
  // dump($form_id);
  if ($form_id == 'node_koala_ninos_form' || $routeName == 'view.koalas_avatares_ninos.page_1') {
    $form['actions']['submit']['#value'] = new TranslatableMarkup('Actualizar información');
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'callback_submit_koala_ninos';
      }
    }
  }
}


/**
 * Funcion callback_submit_agendar_clase para crear un nuevo nodo de tipo agendar_clase.
 */
function callback_submit_agendar_clase(&$form, FormStateInterface $form_state) {
  // Get field_nombre_del_nino_a value.
  $field_nombre_del_nino_a = $form_state->getValue('field_nombre_del_nino_a');
  $field_nombre_del_nino_a = $field_nombre_del_nino_a[0]['value'];
  

  //Get id of the node agendando_clase.
  $nid = $form_state->getValue('nid');
  
  // Titulo del nodo asignar_clase_a_estudiante. Asignar clase a estudiante + nombre del niño.
  $titulo_nodo_asignar_clase_a_estudiante = \Drupal::translation()->translate('Asignar clase a estudiante ') . $field_nombre_del_nino_a;

  //$titulo_nodo_asignar_clase_a_estudiante = \Drupal::translation()->translate('Asignar clase a estudiante');

  // Create node asignar_clase_a_estudiante
  // Fields title, field_seleccionar_clase_agendada
  // $node = Node::create([
  //   'type' => 'asignar_clase_a_estudiante',
  //   'title' => $titulo_nodo_asignar_clase_a_estudiante,
  //   'field_seleccionar_clase_agendada' => $nid,
  // ])->save();
  

  try {
    // Crear un nuevo nodo
    $new_node = Node::create([
      'type' => 'asignar_clase_a_estudiante',
      'title' => $titulo_nodo_asignar_clase_a_estudiante,
    ]);
  
    // Establecer el valor del campo 'field_seleccionar_clase_agendada'
    $new_node->set('field_seleccionar_clase_agendada', $nid);
  
    // Guardar el nodo
    $new_node->save();
  
    // Obtener el ID del nodo recién creado
    $new_node_id = $new_node->id();

 
  
    // Hacer algo con el ID del nuevo nodo...
    \Drupal::messenger()->addMessage( \Drupal::translation()->translate('The new node has been created with ID: @nid', ['@nid' => $new_node_id]));

    // Agregar id del nuevo nodo al campo field_clase_asignada del nodo agendando_clase.
    $node = Node::load($nid);
    $node->set('field_clase_asignada', $new_node_id);
    $alumno_relacionado = $node->get('field_alumno_relacionado')->getValue();
    $node->save();

    dump($alumno_relacionado);

    // Buscar los nodos de tipo agendar_clase que tengan el campo field_alumno_relacionado con el id del alumno.
    // Get the EntityTypeManager.
    $entityTypeManager = \Drupal::service('entity_type.manager');

    // Get the Node entity Query service.
    $query = $entityTypeManager->getStorage('node')->getQuery();

    // Add conditions to the query.
    $query->condition('type', 'agendar_clase');
    $query->condition('field_alumno_relacionado', $alumno_relacionado[0]['target_id']);

    // Execute the query and get the result.
    $nids = $query->execute();
    dump("Nodos encontrados para el alumno con id $alumno_relacionado[0]['target_id']");
    dump($nids);
    // Obtener el numero de nodos encontrados.
    $numero_nodos = count($nids);
    $numero_nodos = $numero_nodos - 1;
    dump("Numero de nodos encontrados: $numero_nodos");

    $numero_clase = $numero_nodos ? $numero_nodos : 1;
    
      // Buscar en el tipo de contenido clases_estudiantes el campo field_numero_de_clase y que sea igual al numero de nodos encontrados. (Ambos son numeros).
      // Get the EntityTypeManager.
      $entityTypeManager = \Drupal::service('entity_type.manager');

      // Get the Node entity Query service.
      $query = $entityTypeManager->getStorage('node')->getQuery();

      // Add conditions to the query.
      $query->condition('type', 'clases_estudiantes');
      $query->condition('field_numero_de_clase', $numero_clase);

      // Execute the query and get the result.
      $nids = $query->execute();
      dump("El numero de clase es");
      dump($nids);

      // Obtener el id del nodo clases_estudiantes.
      $nid_clases_estudiantes = array_shift($nids);
      dump("El id del nodo clases_estudiantes es");
      dump($nid_clases_estudiantes);

      // Agregar el id del nodo clases_estudiantes al campo field_clase_a_asignar que es una referencia de entidad del nodo asignar_clase_a_estudiante.
      $node = Node::load($new_node_id);
      $node->set('field_clase_a_asignar', $nid_clases_estudiantes);
      $node->save();

      // Si se guardo el nodo asignar_clase_a_estudiante correctamente.
      if ($node) {
        dump("Se guardo el nodo asignar_clase_a_estudiante correctamente con id $new_node_id con el numero de clase $nid_clases_estudiantes" );
      }

    // exit;
  }
  catch (\Exception $e) {
    // Mostrar un mensaje de error utilizando el servicio 'messenger'
    \Drupal::messenger()->addError( \Drupal::translation()->translate('An error occurred while creating the new node: @error', ['@error' => $e->getMessage()]));
  }


  

  


}

function callback_submit_koala_ninos(&$form, FormStateInterface $form_state) {
  \Drupal::messenger()->addMessage(\Drupal::translation()->translate('Información actualizada'));
  $form_state->setRedirect('view.koalas_avatares_ninos.page_1');
}




/**
 * Implements hook_form_FORM_ID_alter() for the user_register_form.
 */
function create_koalas_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the username field.
  $form['account']['name']['#access'] = FALSE;

  // Assign the email as the username.
  $form['#submit'][] = 'custom_user_registration_assign_username';
}

/**
 * Funcion callback_submit_crear_hijo para crear un nuevo usuario de tipo hijo.
 */
function callback_submit_crear_hijo($form, &$form_state) {
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $correo_padre = $user->getEmail();
  $password = '123456-' . $uid;
  // Numero random para el correo del 100 al 999.
  $random = rand(100, 999);
  $correo = 'correo-' . $uid . '-' . $random . '@correohijo.com';
  // El nombre del hijo es el title del nodo.
  $nombre = $form_state->getValue('title');

  // Create user account programmatically.
  $user = User::create();
  $user->setPassword($password);
  $user->enforceIsNew();
  $user->setEmail($correo);
  $user->setUsername($correo);
  $user->set("field_nombre_del_hijo", $nombre);

  // Set field_padre entity reference to user padre.
  $user->set("field_padre", $uid);

  // Add role hijo.
  $user->addRole('hijo');
  $user->set("init", $correo_padre);

  $user->activate();
  $user->save();
  $newid = $user->id();

  // Save $newid in field_hijo_relacionado of form node_crear_hijos_form.
  $node = Node::load($form_state->getValue('nid'));
  $node->set('field_hijo_relacionado', $newid);
  $node->save();


}

/*
Crear un hook para que despues de guardar el formulario con id node_agendar_clase_agendar_clases_form
se cree un nuevo nodo de tipo crear_hijos con los datos del formulario anterior
title = field_nombre_del_nino_a
field_sexo = field_sexo_n
field_fecha_nacimiento = field_fecha_nac
 */
// Function create_koalas_node_agendar_clase_agendar_clases_form_submit(&$form, FormStateInterface $form_state) {
//   var_dump($form_state->getValues());
//   exit();

/**
 * }
 */
function callback_submit($form, &$form_state) {
  // sleep(10);
  //  $form_state->setRedirect('<front>');.



  // $user = \Drupal::currentUser();
  // $uid = $user->id();
  // // Obtener el displayname del usuario actual drupal 9.
  // $username = $user->getDisplayName();

  // // Obtener el correo del usuario actual.
  // $correo_padre = $user->getEmail();

  // // Get value radio field_sexo_n.
  // $sexo = $form_state->getValue('field_sexo_n');

  // // Obtener el field_nombre_del_acudiente del usuario actual
  // // $query = \Drupal::entityQuery('user');
  // // $query->condition('uid', $uid);
  // // $entity_ids = $query->execute();
  // // $user = \Drupal\user\Entity\User::load(array_shift($entity_ids));
  // $password = '123456-' . $uid;
  // // Numero random para el correo del 100 al 999.
  // $random = rand(100, 999);
  // $correo = 'correo-' . $uid . '-' . $random . '@correohijo.com';
  // $nombre = $form_state->getValue('field_nombre_del_nino_a');

  // // Create user account programmatically.
  // $user = User::create();
  // $user->setPassword($password);
  // $user->enforceIsNew();
  // $user->setEmail($correo);
  // $user->setUsername($correo);
  // $user->set("field_nombre_del_hijo", $nombre);

  // // Set field_padre entity reference to user padre.
  // $user->set("field_padre", $uid);

  // // Add role hijo.
  // $user->addRole('hijo');
  // $user->set("init", $correo_padre);

  // $user->activate();
  // $user->save();
  // $newidhijo = $user->id();

  // // Crear un nuevo nodo de tipo crear_hijos.
  // $node = Node::create([
  //   'type'        => 'crear_hijos',
  //   'title'       => $form_state->getValue('field_nombre_del_nino_a'),
  //   'field_sexo'  => $sexo,
  //   'field_fecha_nacimiento' => $form_state->getValue('field_fecha_nac'),
  //   'field_hijo_relacionado' => $newidhijo,
  //   'uid' => $uid,
  // ])->save();
  

  // $form_state establecer nuevos valores para  field_alumno_relacionado target id.

 


  // $form_state->setValue('field_alumno_relacionado', $newidhijo);
  // $form_state->setValue('field_id_texto_alumno', $newidhijo);

    // $formObject = $form_state->getFormObject();
    // if (!($formObject instanceof \Drupal\Core\Entity\EntityFormInterface)) {
    //   // Not an entity form, nothin to alter.
    //   return;
    // }
    //  $node = $formObject->getEntity();
    //   $node->save();
  
    //   //$node = \Drupal::routeMatch()->getParameter('node');
    //   $node = Node::load($form_state->getValue('nid'));
  
    // if ($node instanceof NodeInterface) {
    //   try {
    //     // $node->field_alumno_relacionado->target_id = $newidhijo;
    //     // Campo de tipo texto field_id_texto_alumno con el id del hijo.
    //     $node->set('field_id_texto_alumno', $newidhijo);
    //     $node->field_alumno_relacionado->setValue([$newidhijo]);
    //     $node->save();
    //     \Drupal::messenger()->addMessage('Node saved successfully ID: '.$newidhijo);  
    //   }
    //   catch (\Exception $e) {
    //     \Drupal::messenger()->addMessage($e->getMessage(), 'error');  
    //     dump('myerrorid', $e);
    //   }
    // }
  


  /**
   * Custom submit handler to assign email as username.
   */
  function custom_user_registration_assign_username(&$form, FormStateInterface $form_state) {
    $email = $form_state->getValue('mail');
    $form_state->setValue('name', $email);
  }

  // sleep(10);
  // redirect to page internal /padres
  //  $url = Drupal\core\Url::fromUserInput('/padres');
  //  $form_state->setRedirectUrl($url);
  // $form_state->setRedirect('internal:/padres');
}



/**
* Implements hook_views_pre_render().
*/
// function create_koalas_views_pre_render(ViewExecutable $view) {
//   dump($view->storage->id());
//   dump($view->storage->label());
//   dump($view->storage->get('display'));
//   // if (isset($view) && ($view->storage->id() == 'super_awesome_view')) {
//   //   $view->element['#attached']['library'][] = 'custom/custom_view';
//   // }
// }

// Crear un hook que al mostrar las vistas se muestre el id de la vista y el display.

/**
 * Implements hook_views_pre_view().
 */
function create_koalas_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // Obtener el ID de la vista y el nombre del display.
  // $view_id = $view->id();
  
  // // Mostrar el ID de la vista y el nombre del display.
  // \Drupal::messenger()->addMessage(t('ID de la vista: @view_id, Nombre del display: @display_id', [
  //   '@view_id' => $view_id,
  //   '@display_id' => $display_id,
  // ]));
}