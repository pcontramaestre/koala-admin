<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Render\FormattableMarkup;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use DrupalCodeGenerator\Helper\Dumper;
use Drupal\Core\Language\LanguageManagerInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\Core\Entity;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter() for agendar_clase node edit form.
 */
function enviar_correo_clase_agendada_gratis_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Agregar un #submit handler personalizado para enviar el correo.
  //dump($form_id);
    if ($form_id === 'agendar_clase_node_form' || $form_id === 'node_agendar_clase_agendar_clases_form') {
      $form['actions']['submit']['#submit'][] = 'enviar_correo_clase_agendada_gratis_send_email';
    }
}


// Implementar form submit para guardar la fecha y hora de la clase en un campo oculto

function enviar_correo_clase_agendada_gratis_form_submit(array &$form, FormStateInterface $form_state) {
  // Check if this form is the correct one\
   dump('Parada 1');
  if ($form_state->getFormObject()->getFormId() !== 'agendar_clase_node_form' && $form_state->getFormObject()->getFormId() !== 'node_agendar_clase_agendar_clases_form') {
     dump('Parada 1');
     exit;
    return;
  }
   dump('Parada 2');
  // Get necessary values from form state
  $fecha_clase = isset($form_state->getValue('field_fecha_de_la_cita')[0]['value']) ? $form_state->getValue('field_fecha_de_la_cita')[0]['value'] : null;
  $hora_clase = isset($form_state->getValue('field_hora_clase')[0]['value']) ? $form_state->getValue('field_hora_clase')[0]['value'] : null;

   dump('Parada 3');
  // Validate values before use
  if (!$fecha_clase || !$hora_clase) {
    dump('Parada 3');
    exit;
    return;
  }

  // Convert seconds to hours and minutes
  $horas = gmdate('H', $hora_clase);
  $minutos = gmdate('i', $hora_clase);
  $segundos = gmdate('s', $hora_clase);

  // Format the time as HH:mm:ss
  $horaFormateada = $horas . ':' . $minutos;

  // Combine date and time into a single string
  $fechaHoraTexto = $fecha_clase .' '. $horaFormateada .':'. $segundos;

  // Create DateTime object from combined string
  $fechaHoraObjeto = \DateTime::createFromFormat('d-m-Y h:i:s', $fechaHoraTexto);

  // Format date as required
  $fechaFormateada = $fechaHoraObjeto->format('d-m-Y\TH:i:s');

  // Save formatted date to hidden field
  $form_state->setValue('field_fecha_cita_oculta', $fechaFormateada);
  dump($form_state->getValue('field_fecha_cita_oculta'));
  dump('Parada');
  exit;
}



/**
 * Submit handler para enviar el correo.
 */
function enviar_correo_clase_agendada_gratis_send_email(array &$form, FormStateInterface $form_state) {
  //$values = $form_state->getValues();
  
  $user = \Drupal::currentUser();
  $uid = $user->id();
  // Obtener el displayname del usuario actual drupal 9.
  $username = $user->getDisplayName();

  // Obtener el correo del usuario actual.
  $correo_padre = $user->getEmail();

  // Get value radio field_sexo_n.
  $sexo = $form_state->getValue('field_sexo_n');

  // Obtener el field_nombre_del_acudiente del usuario actual
  // $query = \Drupal::entityQuery('user');
  // $query->condition('uid', $uid);
  // $entity_ids = $query->execute();
  // $user = \Drupal\user\Entity\User::load(array_shift($entity_ids));
  $password = '123456-' . $uid;
  // Numero random para el correo del 100 al 999.
  $random = rand(100, 999);
  $correo = 'correo-' . $uid . '-' . $random . '@correohijo.com';
  $nombre = $form_state->getValue('field_nombre_del_nino_a');

  // Create user account programmatically.
  $user = User::create();
  $user->setPassword($password);
  $user->enforceIsNew();
  $user->setEmail($correo);
  $user->setUsername($correo);
  $user->set("field_nombre_del_hijo", $nombre);

  // Set field_padre entity reference to user padre.
  $user->set("field_padre", $uid);

  // Add role hijo.
  $user->addRole('hijo');
  $user->set("init", $correo_padre);

  //Eliminar caracteres especiales del nombre del niño.  
  $nombre = $form_state->getValue('field_nombre_del_nino_a');
  $nombre = $nombre[0]['value'];  
  // Crear usuario en Pencil Connect.
  $create_user_pencil = api_pencil_connect_create_user($nombre,'Student');  
  if ($create_user_pencil !== FALSE) {
    $user->set('field_pencil_id', $create_user_pencil['userId']);    
    $user->set('field_pencil_email', $create_user_pencil['email']);    
    // $user->save();
  } else {
    \Drupal::messenger()->addError(new TranslatableMarkup('Error creating user student in the API'. $create_user_pencil ));
  }

  $user->activate();
  $user->save();
  $newidhijo = $user->id();

  // Crear un nuevo nodo de tipo crear_hijos.
  $node = Node::create([
    'type'        => 'crear_hijos',
    'title'       => $form_state->getValue('field_nombre_del_nino_a'),
    'field_sexo'  => $sexo,
    'field_fecha_nacimiento' => $form_state->getValue('field_fecha_nac'),
    'field_hijo_relacionado' => $newidhijo,
    'uid' => $uid,
  ])->save();

  // Crear un nuevo nodo de tipo koala_ninos. con los campos 
  // field_describe_tu_koala, field_hijo_relacionado
  // Crea un nodo de tipo "horarios_profesores".


  $title = 'Mi primer Koala';
  $description = 'Mi primer Koala descripción';


  $nodekoalas = Node::create([
    'type' => 'koala_ninos',
    'title' => $title,
    'field_describe_tu_koala' => $description,
    'field_hijo_relacionado' => $newidhijo,
    'uid' => $newidhijo,
  ]);


  // Guarda el nodo creado.
  if ($nodekoalas->save()) {
  // Node saved successfully.
    // Mensaje de exito. "El koala del niñ@ se ha creado correctamente".
    \Drupal::messenger()->addMessage(\Drupal::translation()->translate('El koala del niñ@ se ha creado correctamente'));
  } else {
    // Mensaje de error. "El koala del niñ@ no se ha creado correctamente".
    \Drupal::messenger()->addMessage(\Drupal::translation()->translate('El koala del niñ@ no se ha creado correctamente'));
  }




  // Obtener los valores necesarios del formulario.
  // $fecha_clase = $values['field_fecha_de_la_cita']->value;
  // $hora_clase = $values['field_hora_clase']->value;
  // $titulo = $values['title']->value;

  // dump field_hora_clase and field_fecha_de_la_cita
//  var_dump('field_hora_clase and field_fecha_de_la_cita');
  // dump($form_state->getValue('field_hora_clase'));
  // dump($form_state->getValue('field_fecha_de_la_cita'));

  // Save field_hora_clase (type text) and field_fecha_de_la_cita (Number of seconds after 12am) to datetime field field_fecha_cita_oculta
  $fecha_clase_save = $form_state->getValue('field_fecha_de_la_cita');
  $hora_clase_save = $form_state->getValue('field_hora_clase');
  $fecha_clase_save = $fecha_clase_save[0]['value'];
  // var_dump('field_fecha_de_la_cita');
  $hora_clase_save = $hora_clase_save[0]['value'];
  // dump($fecha_clase_save);
  // Convierte los segundos a horas y minutos
  $horas = gmdate('H', $hora_clase_save);
  $minutos = gmdate('i', $hora_clase_save);
  $segundos = gmdate('s', $hora_clase_save);

  // Formatea la hora como HH:mm:ss
  $horaFormateada = $horas . ':' . $minutos . ':' . $segundos;
  //dump($horaFormateada);



$fechaHoraTexto = $fecha_clase_save .' '. $horaFormateada;
//$fechaHoraTexto = $fecha_clase_save;
//dump($fechaHoraTexto);
//convertir en texto a $fechaHoraTexto
//dump(strtotime($fechaHoraTexto));

// Crea un objeto DateTime a partir del texto combinado
$fechaHoraObjeto = \DateTime::createFromFormat('d-m-Y H:i:s', $fechaHoraTexto);

//convertir $fechaHoraObjeto a 'd-m-Y\TH:i:s format for datetime field in drupal



// Obtiene la fecha formateada
$fechaFormateada = $fechaHoraObjeto->format('d-m-Y\TH:i:s');
//dump($fechaFormateada);

//dump($fechaFormateada);


$form_state->setValue('field_alumno_relacionado', $newidhijo);
$form_state->setValue('field_id_texto_alumno', $newidhijo);


// Guarda la fecha formateada en el campo oculto

  $form_state->setValue('field_fecha_cita_oculta', $fechaFormateada);

    $formObject = $form_state->getFormObject();
    if (!($formObject instanceof \Drupal\Core\Entity\EntityFormInterface)) {
      // Not an entity form, nothin to alter.
      return;
    }
     $node = $formObject->getEntity();
      $node->save();

  // Verifica si el objeto es una instancia de NodeInterface y obtiene el ID del nodo.
  if ($node instanceof NodeInterface) {
    $nid = $node->id();
    // Realiza las acciones necesarias con el ID del nodo.
    // Por ejemplo, muestra un mensaje con el ID del nodo.
    //dump($nid);
    $node = Node::load($nid);

    if ($node instanceof NodeInterface) {
      try {
        $node->set('field_fecha_cita_oculta', date('Y-m-d\TH:i:s', strtotime($fechaHoraTexto)));
        // gaurdar field_alumno_relacionado y field_id_texto_alumno
        $node->set('field_alumno_relacionado', $newidhijo);
        $node->set('field_id_texto_alumno', $newidhijo);        
        $node->save();
        \Drupal::messenger()->addMessage('Node saved successfully ID: '.$newidhijo); 
      }
      catch (\Exception $e) {
        \Drupal::messenger()->addMessage($e->getMessage(), 'error');  
        //dump('myerrorid', $e);
      }
    }
    
  }

    
  
 
  //AQUI ENVIAMOS EL CORREO. DESCOMENTAR MAS ADELANTE CUANDO SE ARREGLE EL PROBLEMA DE ENVIO DE CORREO
/*
  $fecha_clase = $form_state->getValue('field_fecha_de_la_cita');
  $hora_clase = $form_state->getValue('field_hora_clase');
  $titulo = $form_state->getValue('title');
  $titulo = $titulo['0']['value'];
  $fecha_clase = $fecha_clase['0']['value'];
  $hora_clase = $hora_clase['0']['value'];
  //dump($fecha_clase, $hora_clase, $titulo);
  //exit;


  // Crear el contenido del correo.
  $message = new FormattableMarkup('<p>Aquí está el archivo invite.ics adjunto para tu clase agendada.</p>
  <br/>
  <p>Fecha: @fecha</p><br>
  <p>Hora: @hora</p><br>
  <p>Título: @titulo</p><br>
  ', [
    '@fecha' => $fecha_clase,
    '@hora' => $hora_clase,
    '@titulo' => $titulo,
  ]);
  
  // Obtener el correo del usuario actual.
  $user = \Drupal::currentUser();
  $email = $user->getEmail();
  $email = 'pablo@icreativadigital.com';
  // Generar el archivo invite.ics
  $file_content = 'BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Drupal//Envío de Correo//ES
BEGIN:VEVENT
SUMMARY:' . $titulo . '
DTSTART:' . $fecha_clase . 'T' . $hora_clase . '00
DTEND:' . $fecha_clase . 'T' . $hora_clase . '25
END:VEVENT
END:VCALENDAR';
  
  dump($file_content);
  // Guardar el archivo en la carpeta temporal de Drupal.
  
  //$temporary_path = \Drupal::service('file_system')->getTempDirectory() . '/invite.ics';
  //Create  $temporary_path file on sites/default/files/invite.ics drupal 9
  $temporary_path = \Drupal::service('file_system')->realpath('public://invite.ics');

  

  //dump($temporary_path);

  file_put_contents($temporary_path, $file_content);

  
  // Adjuntar el archivo al correo.
  $attachments[] = $temporary_path;
  //dump($attachments);
  
  // Obtener la configuración de correo del sitio.
  $config = \Drupal::config('system.site');
  $site_mail = $config->get('mail');
  
  //convertir $message en html para que se pueda enviar el correo
  $message = new FormattableMarkup($message, []);
  
  // Crear el objeto de correo.
  $params['message'] = $message;
  $params['subject'] = 'Invitación a la clase agendada';
  $params['attachments'] = [$temporary_path];
  $params['to'] = $email;
  $params['from'] = $site_mail;
  $params['headers']['Content-Type'] = 'text/html; charset=UTF-8';
  
  // Enviar el correo.
 $mailManager = \Drupal::service('plugin.manager.mail');
 $result = $mailManager->mail('enviar_correo_clase_agendada_gratis', 'enviar_correo', $email, 'es', $params, NULL);
 


 
  // Verificar si ocurrió un error al enviar el correo.
  if ($result['result'] !== TRUE) {
    // drupal_set_message(t('Hubo un problema al enviar el correo. Por favor, intenta nuevamente más tarde.'), 'error');
    // messenger()->addError(t('Hubo un problema al enviar el correo. Por favor, intenta nuevamente más tarde.'));
    //\Drupal::messenger()->addError(t('Hubo un problema al enviar el correo. Por favor, intenta nuevamente más tarde.'));
     \Drupal::messenger()->addError(new TranslatableMarkup('Hubo un problema al enviar el correo. Por favor, intenta nuevamente más tarde.'));    
  } else {
    // Mensaje de éxito.
    // drupal_set_message(t('El correo fue enviado correctamente.'));
    // messenger()->addMessage(t('El correo fue enviado correctamente.'));
    //\Drupal::messenger()->addMessage(t('El correo fue enviado correctamente.'));
    \Drupal::messenger()->addMessage(new TranslatableMarkup('El correo fue enviado correctamente.'));
  }

*/
}

/**
 * Implementa hook_mail().
 */
function enviar_correo_clase_agendada_gratis_mail($key, &$message, $params) {
  switch ($key) {
    case 'enviar_correo':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      $message['headers'] = $params['headers'];
      $message['attachments'] = $params['attachments'];
      

      break;
  }
}