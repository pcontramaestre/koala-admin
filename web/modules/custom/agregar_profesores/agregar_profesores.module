<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_entity_insert().
 * Create node horarios_profesor after register user role profesor.
 *  - Verifica si la entidad es un usuario y tiene el rol "profesor".
 *  - Obtener el field_nombres_y_apellidos_del_pr
 *  - Crea un nodo de tipo "horarios_profesores".
 *  - Create node metodos_de_pago after register user role profesor.
 *  - Create user in Pencil Connect.
 */
function agregar_profesores_entity_insert(EntityInterface $entity) {
  if ($entity instanceof User && in_array('profesor', $entity->getRoles())) {
    $nombres_y_apellidos = $entity->get('field_nombres_y_apellidos_del_pr')->value;
    Node::create([
      'type' => 'horarios_profesores',
      'title' => 'Horario de trabajo de '.$nombres_y_apellidos,
      'field_profesor' => $entity->id(),
      'uid' => $entity->id(),
    ])->save();

    Node::create([
      'type' => 'metodos_de_pago',
      'title' => 'de '.$nombres_y_apellidos,
      'field_profesor' => $entity->id(),
      'uid' => $entity->id(),
    ])->save();

    $create_teache_pencil = api_pencil_connect_create_user($nombres_y_apellidos,'Teacher');
    if ($create_teache_pencil !== FALSE) {
      $entity->set('field_pencil_id', $create_teache_pencil['userId']);
      $entity->set('field_pencil_email', $create_teache_pencil['email']);
      $entity->save();
    } else {
      \Drupal::messenger()->addError(new TranslatableMarkup('Error creating user in the API'));
    }
  }
}

// Implementar un hook que cuando se entre al editar el formulario metodos_de_pago se oculte el campo field_profesor y title
function agregar_profesores_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_metodos_de_pago_edit_form') {
    $form['field_profesor']['#access'] = FALSE;
    $form['title']['#access'] = FALSE;
    $form['actions']['submit']['#value'] =  Drupal::translation()->translate('Actualizar informaciÃ³n');
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'callback_submit_agregar_profesores_metodos_de_pago_submit';
      }
    }
  }
}

function callback_submit_agregar_profesores_metodos_de_pago_submit(&$form, FormStateInterface $form_state) {
  $response = new RedirectResponse('/profesor');
  $response->send();
}