<?php
/**
 * @file
 * ImplementaciÃ³n del hook_form_alter().
 */

 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\node\Entity\Node;
 use \Drupal\Core\Entity\EntityFormInterface;

/**
 * Implements hook_form_alter().
 */
function facturacion_profes_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $current_path = \Drupal::request()->getRequestUri();
  $current_path = explode('/', $current_path);
  $current_path = end($current_path);

  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();

  if ($current_path == 'facturacion') {
    //if ($form_id == 'node_facturacion_profesor_edit_form' || $form_id == 'node_facturacion_profesor_form') {
    if ($form_id == 'node_facturacion_profesor_form') {
      // Asignar un nuevo valor al titulo del nodo, campo title
      $form['title']['widget'][0]['value']['#default_value'] = 'Factura';      
      //$form['actions']['submit']['#value'] =  Drupal::translation()->translate('Cargar factura y enviar');
      $form['actions']['submit']['#value'] = 'Enviar factura';
      // ADD ID "enviar_factura" AL BOTON DE SUBMIT, hay dos formularios activos, verificar si es el correcto
      $form['actions']['submit']['#attributes']['id'] = 'enviar_factura';
      // al hacer clic en el boton de submit, se ejecutara la funcion callback_submit_facturacion_profes_facturacion_profesor_submit
      $form['actions']['submit']['#submit'][] = 'callback_submit_facturacion_profes_facturacion_profesor_submit';
    }

    if ($form_id == 'views_exposed_form') {    
      // Agrega una biblioteca JavaScript personalizada para tus funciones
      $form['#attached']['library'][] = 'facturacion_profes/facturacion_profes_js';
  
      // Agrega atributos personalizados a los filtros para acceder a ellos con JavaScript
      $form['field_fecha_cita_oculta']['#attributes']['class'][] = 'mi-filtro-js';
      
      // Agrega eventos JavaScript a los filtros con una devoluciÃ³n de llamada Ajax despuÃ©s de que se realice el filtrado
      // $form['field_fecha_cita_oculta']['#ajax'] = [
      //   'callback' => 'facturacion_profes_ajax_callback',
      //   'event' => 'change',
      //   'wrapper' => 'vistas-contenido',
      //   'after' => 'facturacion_profes_ajax_after_callback',
      // ];
    } 
  }




  // Al administrador para que le aparezca el metodo de pago.
  if (in_array('content_editor', $roles) || in_array('administrator', $roles)) {
    if ($form_id == 'node_facturacion_profesor_edit_form') {
      if ($form_state->getFormObject() instanceOf EntityFormInterface) {
        $nid = $form_state->getformObject()->getEntity()->id();
        $node = Node::load($nid);
        if ($node) {
          $field_profesor = $node->get('field_asignar_profesor')->getValue();
          $field_profesor = $field_profesor[0]['target_id'];

          if (!empty($field_profesor)) {
            $query = \Drupal::entityQuery('node')->condition('type', 'metodos_de_pago')->condition('field_profesor', $field_profesor);
            $nids = $query->execute();
            $nodos = \Drupal\node\Entity\Node::loadMultiple($nids);
            $nodo_mostrar = reset($nodos);
            
            $nid = $nodo_mostrar->id();

            $cuentas = $nodo_mostrar->get('field_cuentas_virtuales')->getValue();
            $form['field_metodo_de_pago']['widget']['#options'] = [];

            // ocultar y no permitir editar el campo de metodo de pago
            $form['field_metodo_de_pago']['#access'] = FALSE;
            $form['field_metodo_de_pago']['widget']['#access'] = FALSE;

            // foreach ($cuentas as $key => $value) {
            //   //dump($value);
            //   //dump($nid);
            //   $id = $value['first'];
            //   $name = $value['second'];
            //   $form['field_metodo_de_pago']['widget']['#options'][$nid] = $id.' - '.$name;
            // }
          }
        }     
      } else {
        return;
      }
    }
  }

}

function callback_submit_facturacion_profes_facturacion_profesor_submit(&$form, FormStateInterface $form_state) {
  $response = new RedirectResponse('/profesor');
  $response->send();
}